server.jetty.acceptors= # Number of acceptor threads to use.
server.jetty.max-http-post-size=0 # Maximum size in bytes of the HTTP post or put content.
server.jetty.selectors= # Number of selector threads to use.


jetty.http.acceptors:HTTP链接器用于接收请求的线程数量，默认为-1，Jetty基于处理器核数选择一个值，具体规则是低于16核为1，低于24核为2，低于32核为3，32核以上为4。
jetty.http.selectors:Socket selector的数量，默认为-1，Jetty基于处理器核数选择一个值，具体规则是低于4核为1，低于8核为3，8核以上为4。
jetty.http.acceptorQueueSize:用于设置ServerSocket绑定时的backlog值，输入连接指示（对连接的请求）的最大队列长度。如果队列满时收到连接指示，则拒绝该连接。
jetty.threadPool.minThreads:Jetty线程池最小线程数，默认为10。
jetty.threadPool.maxThreads:Jetty线程池最大线程数，默认为200。
jetty.threadPool.idleTimeout:Jetty线程池线程空闲超时时间，单位为毫秒，默认为60000。

flyway和liquibase

thread dump/heap dump

spring-boot-devtools

==================================================================================================================
jetty.httpConfig.outputAggregationSize	server	可以缓冲的响应内容最大写入长度，单位为字节，默认为8192。
jetty.httpConfig.requestHeaderSize	server	HTTP请求头的最大值，单位为字节，默认为8192。
jetty.httpConfig.responseHeaderSize	server	HTTP响应头的最大值，单位为字节，默认为8192。
jetty.server.stopAtShutdown	server	在控制台按下ctrl+c停止Jetty服务器。
jetty.server.stopTimeout	server	Jetty优雅停止的超时时间，单位为毫秒，默认5000。
jetty.server.dumpAfterStart	server	Jetty启动之后，输出服务器、组件以及Web应用的状态。
jetty.server.dumpBeforeStop	server	Jetty关闭之前，输出服务器、组件以及Web应用的状态。
jetty.ssl.host	ssl	TLS/SSL链接器绑定的主机地址，默认本机所有有效的IP地址。
jetty.ssl.port	ssl	TLS/SSL链接器监听的端口，默认为8443。
jetty.ssl.idleTimeout	ssl	TLS/SSL链接器空闲超时时间，单位为毫秒，默认30000。
jetty.ssl.soLingerTime	ssl	TLS/SSL链接器Socket Linger时间，默认为-1，即禁用。
jetty.ssl.acceptors	ssl	TLS/SSL链接器用于接收请求的线程数量。
jetty.ssl.selectors	ssl	TLS/SSL链接器Socket selector的数量。
jetty.ssl.acceptorQueueSize	ssl	设置TLS/SSL链接器ServerSocket绑定时的backlog值
jetty.ssl.sniHostCheck	ssl	是否检查请求主机名是否匹配SNI 名称。
jetty.ssl.stsMaxAgeSeconds	ssl	设置Strict-Transport-Security 响应头的过期时间，单位为秒，默认为3153600。
jetty.sslContext.keyStorePath	ssl	密钥库文件路径，相对于$JETTY_BASE。
jetty.sslContext.trustStorePath	ssl	信任库文件路径，相对于$JETTY_BASE。
jetty.sslContext.keyStorePassword	ssl	密钥库密码。
jetty.sslContext.keyStoreType	ssl	密钥库类型（JCEKS、JKS、DKS、PKCS11、PKCS12）。
jetty.sslContext.keyStoreProvider	ssl	密钥库提供者。
jetty.sslContext.keyManagerPassword	ssl	KeyManager密码。
jetty.sslContext.trustStorePassword	ssl	信任库密码。
jetty.sslContext.trustStoreType	ssl	信任库类型（JCEKS、JKS、DKS、PKCS11、PKCS12）。
jetty.sslContext.trustStoreProvider	ssl	信任库提供者。
jetty.sslContext.needClientAuth	ssl	是否要求客户端证书认证，如果为true并且客户端选择不提供自身的验证信息，则协商将会停止。
jetty.sslContext.wantClientAuth	ssl	是否请求客户端证书认证，如果为true并且客户端选择不提供其自身的验证信息，则协商将会继续。
jetty.sslContext.sslSessionCacheSize	ssl	SSL会话缓存大小。
jetty.sslContext.sslSessionTimeout	ssl	SSL会话缓存超时时间，单位为秒。
jetty.gzip.minGzipSize	ssl	指定一个HTTP响应内容长度的限制，当超过该值时，Jetty启动GZIP压缩。
jetty.gzip.compressionLevel	ssl	GZIP压缩级别。
jetty.gzip.excludedUserAgent	ssl	正则表达式，用于指定禁用GZIP的User Agent。如果请求的User Agent匹配该表达式，则将不启用GZIP压缩。默认为.MSIE.6.0.，即IE6不支持GZIP压缩。
jetty.deploy.monitoredDir	deploy	Jetty部署模块监控目录，相对于$JETTY_BASE，用于热部署监控文件变更。
jetty.deploy.monitoredPath	deploy	Jetty部署模块监控路径（绝对目录），用于热部署监控文件变更。
jetty.deploy.defaultsDescriptorPath	deploy	Web应用使用的默认部署描述文件，该文件中的配置信息将会被所有Web应用继承，默认为/etc/webdefault.xml。
jetty.deploy.scanInterval	deploy	Jetty部署模块扫描监控目录的时间间隔，单位为秒，默认为1秒。
jetty.deploy.extractWars	deploy	是否解压WAR包，默认为true。
jetty.jmxremote.rmihost	jmx-remote	JMX远程访问绑定的RMI主机地址。
jetty.jmxremote.rmiport	jmx-remote	JMX远程访问RMI监听的端口，默认为1999。
==================================================================================================================
Mybatis:通常数据库列使用大写单词命名，单词间用下划线分隔；而java属性一般遵循驼峰命名法。 为了在这两种命名方式之间启用自动映射，需要将 mapUnderscoreToCamelCase设置为true。


docker pull elasticsearch:2.4.4
docker tag elasticsearch:2.4.4  registry-vpc.cn-shanghai.aliyuncs.com/hzph/elasticsearch:2.4.4
docker push registry-vpc.cn-shanghai.aliyuncs.com/hzph/elasticsearch:2.4.4

----------------------------------------------------------------------------------------------------------------------------------------------
Garbage First (G1) 收集器
G1 (-XX:+UseG1GC)收集器是一个在java 6中使用新的收集器，现在从java 7U4开始正式支持。它是一个部分并发的收集算法，它会尝试通过小步增量stop-the-world的方式压缩老年区，来努力最小化FullGC，而因为碎片引起的FullGC正是CMS的一个噩梦。G1也是分代收集器，但是它与其他收集器器使用不同的堆组织方式，它根据不同的用途，它将堆分为大量（(~2000)）固定大小的区（regions），相同用途的堆也是不连续的（译者：Java堆的内存布局与就与其他收集器有很大差别，它将整个Java堆划分为多个大小相等的独立区域（Region），虽然还保留有新生代和老年代的概念，但新生代和老年代不再是物理隔离的了，它们都是一部分Region（不需要连续）的集合）。

 G1采用并发的标记区域的方式来跟踪区域之间的引用，并且只关注收集能收集到最大空闲区的区域（译者：G1跟踪各个Region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据允许的收集时间，优先回价值最大的Region（这也就是Garbage-First名称的来由））。这些区域的收集是暂停程序的方式，增量的将存活的对象复制到一个空的区域里面，从而收集的过程是压缩的。在同一个周期里收集的区域叫做收集组（Collection Set）

如果一个对象大小超过了区域大小的50%，那么它会被分配到一个大区域里面，可能是当前区域大小的几倍。在G1下，收集和分配大对象是非常昂贵的操作，目前还没有任何优化措施。 

任何压缩收集器所面临的挑战不是移动对象，而是对这些对象的引用更新。如果一个对象被许多区域引用，那么更新这些引用会比移动对象更加耗时。G1通过“记忆集（Remembered Sets）” 跟踪区域中的那些有来自其他区域引用的对象。记忆集（Remembered Sets）是一些卡片的集合，这些卡片上标记着更新信息。如果记忆集（Remembered Sets）变大，那么G1就明显变慢了。当从一个区域转移对象到另外区域的时候，那么对应暂停时间的长度与需要扫面和更新引用的区域的数量成正比。

维护记忆集（Remembered Sets）会增加新生代收集的成本，导致比并行老生代收集器（Parallel Old collector）和CMS收集器对新生代的收集时暂停更长的时间。

G1是目标驱动性，通过–XX:MaxGCPauseMillis=<n>设置延迟时间，默认是200ms，该目标将影响在每个周期做的工作量，也是竭尽所能要保证的唯一依据。设置目标在几十毫秒大多是徒劳的，并且几十毫秒的目标也不是G1的关注点。

当一个应用程序可以容忍0.5-1.0秒的暂停来增量压缩，G1是对于拥有一个大堆，并且会逐渐碎片化的场景来说是很好的通用的收集器。G1 倾向于降低在最环情况下暂停的频率，而正是CMS的问题，为了处理产生碎片而扩展了新生代收集和对老生代增量压缩。大部分的暂停被限制在一个区域而不是整个堆的压缩。

与CMS一样，G1也会因为无法保证晋升率而失败，最终回到暂停程序的FullGC上。就像CMS“并发模式失败”一样，G1也可能遭受转移失败，在日志中能看到“目标空间溢出（to-space overflow）”。这种情况发生在对象转移的区域没有足够的空闲空间的时候，与晋升失败类似。如果发生这种情况，请尝试使用更大的堆，更多标记线程，但在某些情况下，需要应用程序作出改变，以减少分配比率。

 对G1来说一个具有挑战性的问题是处理高关注率的对象和区域。 当区域里存活的对象没有被其他区域大量引用。增量stop-the-world的压缩方法效果很好。如果一个对象或者区域是被大量引用的，记忆集（Remembered Sets）将会相应变大。并且G1将会避免收集这些对象。最终，不得不导致频繁的中等长度的暂停时间来压缩堆。
----------------------------------------------------------------------------------------------------------------------------------------------
并发标记清理收集器（ Concurrent Mark Sweep (CMS) ）
CMS（-XX：+ UseConcMarkSweepGC）收集器在老生代中使用，收集那些在老生代收集中不可能再到达的年老对象。它与应用程序并发的运行，在老生代中保持一直有足够的空间以保证不会发生晋升失败。

晋升失败将会触发一次FullGC，CMS按照下面多个步骤处理：

1、初始标记：寻找GC根对象;
2、并发标记：标记所有从GC根开始可到达的对象;
3、并发预清理：检查被更新过的对象引用和在并发标记阶段晋升的对象。
4、重新标记：捕捉预清洁阶段以来已更新的对象引用。
5、并发清理：通过回收被死对象占用的内存更新可用空间列表。
6、并发重置：重置数据结构为下一次运行做准备。


当年老对象变成不可到达，占用空间被CMS回收并且放入到空闲空间列表中。当晋升发生的时候，会查询空闲空间列表，为晋升对象找到适合的空间。这增加了晋升的成本，从而相比并行收集器也增加了新生代收集的成本。

 注：CMS 不是压缩收集器，随着时间的推移在老生代中会导致碎片。对象晋升可能失败，因为一个大的对象可能在老生代在找不到一个可用空间。当发生这样事件后，会记录一条“晋升失败”的消息，并且触发一次FullGC来压缩存活的年老对象。对于这种压缩驱动的FullGCs，可以预计相比在老生代中使用并行老生代收集器（Parallel Old collector ）暂停的时间为更长，因为CMS使用单线程压缩。

CMS尽可能的与应用程序并发运行，它具有许多含义。首先，由于收集器会占用CPU的时间，因此CPU可用于应用程序的时间减少。CMS消耗的时间量与晋升到老年区的对象数量呈线性关系。第二、对于并发GC周期中的某些阶段，所有的应用线程必须到达一个安全点，比如标记GC根和执行并行的重新标记检查更新。

注：如果一个应用程序年老区的对象发生非常明显的变化，重新标记阶段将是非常耗时的，在极端情况下，它可能比一个完整的并行老生代收集器（Parallel Old collector）的压缩时间还要长。


CMS通过降低吞吐量、更费时的新生代的收集，更大的空间占用，来降低FullGC的频率。 根据不同的晋升率，与并行收集（Parallel Collector）相比吞吐量减少10%-40%。CMS也要求多于20%的空间来存放额外的数据结构和“漂浮垃圾（floating garbage）”，漂浮垃圾是值在并发标记阶段丢掉的，到下一个收集周期处理的对象。 

高晋升率和由此产生的碎片，可以通过增加新生代和老生代空间的大小来降低。

 
注：当CMS收集的空间不能满足晋升的时候，它可能遇到“并发模式失败”，在日志中可以找到记录。产生这种情况的一个原因是收集的太迟了，这样可以通过调整策略来解决。另外的原因是收集的空间空闲率跟不上高的晋升率或则某些应用高的对象更新率。如果你的应用的晋升率和更新率太高，你可能需要改变你的应用程序来减少晋升的压力。使用更多的内存有时候可能会使得情况更糟，因为CMS需要扫描更多的内存。
--------------------------------------------------------------------------------------------------
mybatis的SQL语句构建器

使用Travis CI可以自动部署github上的项目

CMS（-XX：+ UseConcMarkSweepGC）收集器在老生代中使用，收集那些在老生代收集中不可能再到达的年老对象。它与应用程序并发的运行，在老生代中保持一直有足够的空间以保证不会发生晋升失败。

-XX：+UseConcMarkSweepGC 

CMS:并发标记清理收集器 

Parallel Old Collector


NTP

################################################################

# Xms represents the initial size of total heap space
# Xmx represents the maximum size of total heap space

-Xms2g
-Xmx2g

################################################################
## Expert settings
################################################################
##
## All settings below this section are considered
## expert settings. Don't tamper with them unless
## you understand what you are doing
##
################################################################

## GC configuration
-XX:+UseConcMarkSweepGC
-XX:CMSInitiatingOccupancyFraction=75
-XX:+UseCMSInitiatingOccupancyOnly

## optimizations

# pre-touch memory pages used by the JVM during initialization
-XX:+AlwaysPreTouch

## basic

# force the server VM (remove on 32-bit client JVMs)
-server

# explicitly set the stack size (reduce to 320k on 32-bit client JVMs)
-Xss1m

# set to headless, just in case
-Djava.awt.headless=true

# ensure UTF-8 encoding by default (e.g. filenames)
-Dfile.encoding=UTF-8

# use our provided JNA always versus the system one
-Djna.nosys=true

# use old-style file permissions on JDK9
-Djdk.io.permissionsUseCanonicalPath=true

# flags to configure Netty
-Dio.netty.noUnsafe=true
-Dio.netty.noKeySetOptimization=true
-Dio.netty.recycler.maxCapacityPerThread=0

# log4j 2
-Dlog4j.shutdownHookEnabled=false
-Dlog4j2.disable.jmx=true
-Dlog4j.skipJansi=true

## heap dumps

# generate a heap dump when an allocation from the Java heap fails
# heap dumps are created in the working directory of the JVM
-XX:+HeapDumpOnOutOfMemoryError

# specify an alternative path for heap dumps
# ensure the directory exists and has sufficient space
#-XX:HeapDumpPath=${heap.dump.path}

## GC logging

#-XX:+PrintGCDetails
#-XX:+PrintGCTimeStamps
#-XX:+PrintGCDateStamps
#-XX:+PrintClassHistogram
#-XX:+PrintTenuringDistribution
#-XX:+PrintGCApplicationStoppedTime

# log GC status to a file with time stamps
# ensure the directory exists
#-Xloggc:${loggc}

# By default, the GC log file will not rotate.
# By uncommenting the lines below, the GC log file
# will be rotated every 128MB at most 32 times.
#-XX:+UseGCLogFileRotation
#-XX:NumberOfGCLogFiles=32
#-XX:GCLogFileSize=128M
################################################################


mobz/elasticsearch-head
mobz/elasticsearch-head


docker pull elasticsearch:5.5.3
docker tag elasticsearch:5.5.3  registry-vpc.cn-shanghai.aliyuncs.com/hzph/elasticsearch:5.5.3
docker push registry-vpc.cn-shanghai.aliyuncs.com/hzph/elasticsearch:5.5.3

ElasticSearch的Transport协议的9300端口


ES官方已不建议通过TransportClient来访问Elasticsearch，使用TransportClient 5.5.3版在建立连接时会报 NoNodeAvailableException 问题，并且ES官方已经不再维护TransportClient。


读者需要注意的是，Elasticsearch中的索引可能由一个或多个Lucene索引构成，细节由Elasticsearch的索引分片（shard）、复制（replica）机制及其配置决定。

=================================================================================================================================================
并行收集器(Paralle Collector)有两种形式。一种是并行收集器（-XX：+ UseParallelGC），它在新生代的收集中使用多线程来执行，在老生代的收集中使用单线程执行。另一种是从java 7U4开始默认使用并行老生代收集器（Parallel Old collector ）(‑XX:+UseParallelOldGC)，它在新生代的收集和老生代的收集均使用多线程。


在多处理器系统上并行老生代收集器（Parallel Old collector ）在所有收集器中有最大吞吐量。只有收集开始时它才会影响到正在运行的程序，然后使用的最有效的算法并行的多个线程的收集。这使得并行老生代收集器（Parallel Old collector ）非常适合批处理应用。
注：基于现代的硬件，对老生代的压缩每GB的存活对象预计需要暂停一到五秒。

为了避免竞争，每一个线程都分配一个线程本地分配缓冲区（Thread Local Allocation Buffer (TLAB)），线程在其中分配对象。使用TLABs允许对象分配的规模等于线程的数量，避免了单个内存资源的竞争问题。凭借TLAB对象分配是一个廉价的操作。它简单的为对象的大小分配一个指针，大部分平台上大约需要10个指令。java堆内存的分配比C在运行时使用malloc 函数分配内存更加廉价。 
注：鉴于个别对象分配是很廉价的，小集合分配的速率与对象分配的速度是成正比的。
当一个TLAB被耗尽率，线程可以简单从伊甸区（Eden）请求一个新的。当伊甸区（Eden）用完后，开始一次新生代回收（minor collection）。
 大对象(-XX:PretenureSizeThreshold=<n>)在年轻代（young generation）的分配可能失败，因此必须分配在老年代（old generation），比如：大数组。

如果阈值的设置低于TLAB大小，适合在TLAB的对象将不会创建在老生代（old generation）。新的G1收集器在处理大对象的时候有所不同，在后面单独的部分讨论。
晋升针对那些足够老的对象(– XX:MaxTenuringThreshold=<n>)，或者幸存空间（survivor space）溢出。

Hotspot 的卡表是一个bytes数组，其中每个字节（byte）用于跟踪的在相应的老生代的512字节区域里可能存在跨代引用，引用被存储在堆里，“store屏障（store barrier）”代码将标记卡表（card table）的卡片来表明在相关的512字节的堆里面从老生代到新生代可能存在的一个潜在引用。  在收集时卡片表（card table）被用于扫描跨代引用，结果作为在新生代中有效的GC根（GC Roots）。
老年代的收集器会预测什么时候需要收集，以避免年轻代的晋升失败。
注：为了避免晋升失败，你需要调整你的填充空间（为晋升失败保留的buffer）），让老年代可以容纳晋升后的对象(‑XX:PromotedPadding=<n>)
注：当一次FullGC后堆需要增长 。可以通过将–Xms 和 –Xmx设置为一样的值，来避免在FullGC时的堆调整大小。
    年老区（tenured space）的填充速率可以通过增加幸存区（survivor spaces）的大小和延长晋升到老年区（tenured space）前的存活时间来减少。但是，由于在新生代收集（Minor collections）中，在幸存区之间的复制成本增加，幸存区（survivor spaces）大小的增加和在延长在晋升之前在新生代收集（Minor collections）(–XX:MaxTenuringThreshold=<n>)的存活时间，也会增加新生代收集（Minor collections）的成本和暂停时间。

Minor Garbage Collection;
Major Garbage Collection;
Full  Garbage Collection;

=================================================================================================================================================
xpack.graph.enabled: true
xpack.ml.enabled: true
xpack.monitoring.enabled: true
xpack.reporting.enabled: true
xpack.security.enabled: true
xpack.watcher.enabled: true
=================================================================================================================================================
Java8里的最新时间/日期格式
=================================================================================================================================================
elasticsearch-head:
http://localhost:9100/?base_uri=http://118.24.181.143:9200/&auth_user=elastic&auth_password=elasticpassword

http://localhost:9100/?base_uri=http://es-cn-0pp0ovb9f0005qak9.elasticsearch.aliyuncs.com:9200/&auth_user=elastic&auth_password=B7024A89-7d87

maven设置下载源码:
mvn dependency:sources
mvn dependency:resolve -Dclassifier=javadoc
==============================================================================================================================================
Elastic-Search清除type下的所有document:
POST http://47.100.60.209:9200/gitlab/file/_delete_by_query?conflicts=proceed
body:{
	"query":{
		"match_all":{}
	}
}

查询文档总个数:
http://es-cn-0pp0ovb9f0005qak9.elasticsearch.aliyuncs.com:9200/shop/shop/_count

索引分析模块包括分词器(analyzer)、分解器(tokenizer)、词元过滤器(token filters)。
==============================================================================================================================================
1. 全局异常处理
2. 全局锁
3. 日志分类
4. 调用链
5. mybatis统一处理sql字段下划线和java驼峰转化
#########################################Spring Core源码感触#############################################################################
1. 严谨，会在恰当的地方使用恰当的语法；比如不允许修改变量时，使用final修饰，大部分没有这么严谨的用法。
2. 有很多比原生java更有效率的数据结构，非常适合特定场景。



######################################################################################################################
System.arrayCopy的源代码声明 : 
public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length);


在某些业务场景中，需要进行多个 DB 操作的同时，还会调用消息系统，DB 操作成功、消息发送失败或者反过来都会造成业务的不完整。GTS 可以让您轻松解决消息系统和数据库的事务，将各个资源加入事务范畴。



{
	"query": {
		"bool":{
			"must":[
					{"match":{"type":"java"}},
					{"match":{"content":"Mapper"}}
				]
		}
	},
	"_source":["type", "path", "content"]
}

java访问控制机制


显示索引信息:
SHOW INDEX FROM bk_act_shop_ref;

analyze table bk_act_card_ref;


Eclipse Memory Analyzer

MAT（Eclipse Memory Analyzer）

 -XX:+HeapDumpOnOutOfMemoryError

Thread Stack可以查看OutOfMemoryError的地方


Unreachable Objects Histogram

Shallow Heap <-> Retained Heap <-> Percentage

Shallow Size
Shallow Size是对象本身占据的内存的大小，不包含其引用的对象。对于常规对象（非数组）的Shallow Size由其成员变量的数量和类型来定，而数组的ShallowSize由数组类型和数组长度来决定，它为数组元素大小的总和。

Retained Size
Retained Size=当前对象大小+当前对象可直接或间接引用到的对象的大小总和。(间接引用的含义：A->B->C,C就是间接引用) ，并且排除被GC Roots直接或者间接引用的对象
https://blog.csdn.net/duan_zhihua/article/details/51587901
====================================================================================
如何有效的避免OOM: 善于利用软引用和弱引用

强引用->软引用->弱引用

Biggest Objects by Retained Size


Heap Dump:
ps aux|grep java
jmap -dump:file=heap-dump.hprof 17820
Thread Dump:
ps aux|grep java
jstack -l <pid> <file-path>
kill -3 <pid> (只安装了JRE，没有安装JDK时使用，因为没有jstack)
kill -3直接往标准输出Thread Dump，如果通过nohup进行了标准输出/标准错误重定向，将会把输出到指定的标准输出。
-----------------------------------------------------------------------------------------------
jmap -help
Usage:
    jmap [option] <pid>
        (to connect to running process)
    jmap [option] <executable <core>
        (to connect to a core file)
    jmap [option] [server_id@]<remote server IP or hostname>
        (to connect to remote debug server)

where <option> is one of:
    <none>               to print same info as Solaris pmap
    -heap                to print java heap summary
    -histo[:live]        to print histogram of java object heap; if the "live"
                         suboption is specified, only count live objects
    -clstats             to print class loader statistics
    -finalizerinfo       to print information on objects awaiting finalization
    -dump:<dump-options> to dump java heap in hprof binary format
                         dump-options:
                           live         dump only live objects; if not specified,
                                        all objects in the heap are dumped.
                           format=b     binary format
                           file=<file>  dump heap to <file>
                         Example: jmap -dump:live,format=b,file=heap.bin <pid>
    -F                   force. Use with -dump:<dump-options> <pid> or -histo
                         to force a heap dump or histogram when <pid> does not
                         respond. The "live" suboption is not supported
                         in this mode.
    -h | -help           to print this help message
    -J<flag>             to pass <flag> directly to the runtime system
-----------------------------------------------------------------------------------------------
java.lang.ref.WeakReference
java.lang.ref.SoftReference
java.lang.ref.ReferenceQueue
org.springframework.util.ConcurrentReferenceHashMap

Duplicate Classes: Detect classes loaded by multiple class loaders.

<system class loader> (51%)

org.springframework.boot.loader.LaunchedURLClassLoader @ 0xf5a36c30 (42%)
sun.misc.Launcher$AppClassLoader @ 0xf59b8b20 (5%)
sun.misc.Launcher$ExtClassLoader @ 0xf59d1c08 (2%)

docker stats caab856aea9c


hystrix

import javax.xml.bind.annotation.XmlAttribute;

从JAXB2.0开始，可以通过使用annotation进行Object-XMl mapping。

对于强引用，我们平时在编写代码时经常会用到。而对于其他三种类型的引用，使用得最多的就是软引用和弱引用，这2种既有相似之处又有区别。它们都是用来描述非必需对象的，但是被软引用关联的对象只有在内存不足时才会被回收，而被弱引用关联的对象在JVM进行垃圾回收时总会被回收。

Java四种引用: StrongReference > SoftReference > WeakReference > PhantomReference

说明：finalize()函数是在JVM回收内存时执行的，但JVM并不保证在回收内存时一定会调用finalize()。

总结：JVM的垃圾回收机制，在内存充足的情况下，除非你显式调用System.gc()，否则它不会进行垃圾回收；在内存不足的情况下，垃圾回收将自动运行

虽然没有减少JVM的大小，但减少了垃圾收集的次数。

import java.lang.ref.ReferenceQueue;
import java.lang.ref.PhantomReference;
import java.lang.ref.WeakReference;
import java.lang.ref.SoftReference;

策略配置文件

在 Java 访问控制机制中，主要有以下几个类：

SecurityManager
AccessController
AccessControlContext
ProtectionDomain
PermissionCollection
Permission
Policy

1.如果你希望BigDecimal能够精确地表示你希望的数值，那么一定要使用字符串来表示小数，并传递给BigDecimal的构造函数。
2.如果你使用Double.toString来把double转化字符串，然后调用BigDecimal(String)，这个也是不靠谱的，它不一定按你的想法工作。
3.如果你不是很在乎是否完全精确地表示，并且使用了BigDecimal(double)，那么要注意double本身的特例，double的规范本身定义了几个特殊的double值(Infinite，-Infinite，NaN)，不要把这些值传给BigDecimal，否则会抛出异常。



WebMvcConfigurerAdapter
WebMvcConfigurationSupport

SecureRandom第一次生成随机数非常慢，导致程序hang住
具体原因：https://www.aliyun.com/jiaocheng/288393.html

分别自动注入DataSourceTransactionManager或JpaTransactionManager

这里主要通过单元测试演示了如何使用 @Transactional 注解来声明一个函数需要被事务管理，通常我们单元测试为了保证每个测试之间的数据独立，会使用 @Rollback 注解让每个单元测试都能在结束时回滚。而真正在开发业务逻辑时，我们通常在service层接口中使用 @Transactional 来对各个业务逻辑进行事务管理的配置

关于事务管理器，不管是JPA还是JDBC等都实现自接口 PlatformTransactionManager 如果你添加的是 spring-boot-starter-jdbc 依赖，框架会默认注入 DataSourceTransactionManager 实例。如果你添加的是 spring-boot-starter-data-jpa 依赖，框架会默认注入 JpaTransactionManager 实例。

org.springframework.jdbc.datasource.DataSourceTransactionManager


如果Spring容器中存在多个 PlatformTransactionManager 实例，并且没有实现接口 TransactionManagementConfigurer 指定默认值，在我们在方法上使用注解 @Transactional 的时候，就必须要用value指定，如果不指定，则会抛出异常。
对于系统需要提供默认事务管理的情况下，实现接口 TransactionManagementConfigurer 指定。
对有的系统，为了避免不必要的问题，在业务中必须要明确指定 @Transactional 的 value 值的情况下。不建议实现接口 TransactionManagementConfigurer，这样控制台会明确抛出异常，开发人员就不会忘记主动指定。

jps - Lists the instrumented Java Virtual Machines (JVMs) on the target system. This command is experimental and unsupported.
jconsole

Supported Redis configurations: 1. cluster;2. Sentinel;3. Master/Slave;4. Single

相比于其他流行的 Java 字节码操纵工具，ASM 更小更快。ASM 具有类似于 BCEL 或者 SERP 的功能，而只有 33k 大小，而后者分别有 350k 和 150k。同时，同样类转换的负载，如果 ASM 是 60% 的话，BCEL 需要 700%，而 SERP 需要 1100% 或者更多。

ASM 已经被广泛应用于一系列 Java 项目：AspectWerkz、AspectJ、BEA WebLogic、IBM AUS、OracleBerkleyDB、Oracle TopLink、Terracotta、RIFE、EclipseME、Proactive、Speedo、Fractal、EasyBeans、BeanShell、Groovy、Jamaica、CGLIB、dynaop、Cobertura、JDBCPersistence、JiP、SonarJ、Substance L&F、Retrotranslator 等。Hibernate 和 Spring 也通过 cglib，另一个更高层一些的自动代码生成工具使用了 ASM。

使用 ASM 动态生成类，不需要像早年的 class hacker 一样，熟知 class 文件的每一段，以及它们的功能、长度、偏移量以及编码方式。ASM 会给我们照顾好这一切的，我们只要告诉 ASM 要改动什么就可以了 —— 当然，我们首先得知道要改什么：对类文件格式了解的越多，我们就能更好地使用 ASM 这个利器。


spring-boot-starter-atomikos 可以在单个服务内使用多个数据库，进行跨库的数据库事务，XA模式


JTA事务比JDBC事务更强大。一个JTA事务可以有多个参与者，而一个JDBC事务则被限定在一个单一的数据库连接。下列任一个Java平台的组件都可以参与到一个JTA事务中：JDBC连接、JDO PersistenceManager 对象、JMS 队列、JMS 主题、企业JavaBeans（EJB）、一个用J2EE Connector Architecture 规范编译的资源分配器。

一个XADataSource对象是一个XAConnection对象的工厂。XAConnections是参与到JTA事务中的连接。你需要使用应用程序服务器管理工具来建立XADataSource对象。
要用 JTA 进行事务界定，应用程序要调用 javax.transaction.UserTransaction 接口中的方法。

XA连接（javax.sql.XAConnection）和非XA（java.sql.Connection）连接的区别在于：XA可以参与JTA的事务，而且不支持自动提交。

首先，实现一个Xid类用来标识事务:在使用JTA之前，你必须首先实现一个Xid类用来标识事务（在普通情况下这将由事务管理程序来处理）。Xid包含三个元素：formatID、gtrid（全局事务标识符）和bqual（分支修饰词标识符）。


SHA1withRSA
加签：用RSA的私钥初始化SHA1，然后对数据进行SHA1签名。
验签：用RSA的公钥初始化验证SHA1，然后对数据进行SHA1验签。

单库配置：            
 引入之后，默认情况下，Spring Boot会自动为我们配置好一个DataSource，它会在classpath中搜索H2、hsqldb等内存数据库的jar包，如果找到了，就会自动配置一个内存数据库的DataSource。
如果在application.yml或application.property中指定了spring.datasource.*的相关配置参数，Spring Boot就会使用该配置创建一个DataSource。
然后会自动创建使用该DataSource的SqlSessionFactoryBean以及SqlSessionTemplate。会自动扫描你的Mappers，连接到SqlSessionTemplate，并注册到Spring上下文中。
spring.datasource.url=jdbc:mysql://localhost/test
spring.datasource.username=dbuser
spring.datasource.password=dbpass
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
@Primary //该注解表示在同一个接口有多个实现类可以注入的时候，默认选择哪一个，而不是让autowired注解报错，官网要求当多个数据源时，必须指定一个datasource，另一个datasource则不用添加。


JpaRepository


//TODO: Solar调研

XA连接是一个JTA事务中的参与者。XA连接不支持JDBC的自动提交特性。也就是说应用程序不必在xadatasource[XA]连接上调用java.sql.Connection.commit()或java.sql.Connection.rollback()；而应用程序应该使用UserTransaction.begin(),UserTransaction.commit()和UserTransaction.rollback().

Spring的5个事务隔离级别和7个事务传播行为。
脏读
不可重复读
幻读

Atomikos

proxy模式和asm模式

ClassAdapter是 ASM 框架提供的一个默认类，负责沟通 ClassReader和 ClassWriter。如果想要改变 ClassReader处读入的类，然后从 ClassWriter处输出，可以重写相应的 ClassAdapter函数。这里，为了改变 Account类的 operation 方法，我们将重写 visitMethdod方法。

以下的函数使事务管理器可以对资源管理器进行的操作：
1）xa_open,xa_close：建立和关闭与资源管理器的连接。
2）xa_start,xa_end：开始和结束一个本地事务。
3）xa_prepare,xa_commit,xa_rollback：预提交、提交和回滚一个本地事务。
4）xa_recover：回滚一个已进行预提交的事务。
5）ax_开头的函数使资源管理器可以动态地在事务管理器中进行注册，并可以对XID(TRANSACTION IDS)进行操作。
6）ax_reg,ax_unreg；允许一个资源管理器在一个TMS(TRANSACTION MANAGER SERVER)中动态注册或撤消注册。


调研atomikos是否支持mysql,支持kafka


The Bitronix Transaction Manager (BTM) is a simple but complete implementation of the JTA 1.1 API. It is a fully working XA transaction manager that provides all services required by the JTA API while trying to keep the code as simple as possible for easier understanding of the XA semantics.

High-performance proxies around javax.sql entities via bytecode generation with support for Javassist, and cglib, with fallback to java.lang.reflect.proxy. Javassist and cglib offer substantial performance increases and are strongly recommended.


配置Bean的几个注解:
@Component
@Service
@Resoure
@Inject
@Repository
@Controller

Spring boot里ClassLoader继承关系


jinfo -flag MaxHeapSize 5 查看当前java进程的-Xmx大小
-XX:MaxHeapSize=4164943872   

Rx Observable
Predicate

最典型的 RxJava 中的Observable类，提供了2个函数， 分别是subscribeOn与observeOn。前者可以切换被观察时的线程（如果说数据发射的线程不够严谨，数据并非一定在观察时发射的，尤其是开发者自定义OnSubscribe时），后者可以切换数据被消费时的线程。


nginx 499问题: Nginx响应超时，客户端主动关闭链接，导致nginx报499，可以通过设置proxy_ignore_client_abort  on;让nginx忽略客户端主动关闭链接，继续等待后端的响应，如果后端最终响应了xxx，那么nginx就在access.log里记录xxx。从而验证后端是否有问题，但不建议在Nginx进行长期开启，在后端有大量超时时，会导致使用Nginx的大量链接，浪费大量链接，将Nginx拖死。所以proxy_ignore_client_abort建议只是临时开启，用于排查问题。

SpringBoot的@Cacheable


<cache:annotaion-drive cache-manager="cacheManager"/>


application.properties文件中新增spring.jpa.properties.hibernate.show_sql=true，开启hibernate对sql语句的打印
@CacheConfig：主要用于配置该类中会用到的一些共用的缓存配置。

Collections.synchronizedMap(Map<K, V> m);
private volatile int modCount; 用来实现fail-fast
+loadFactor:加载因子
+threshold:判断是否需要调整容量。=容量 * 加载因子

RedisClusterConfiguration

@JsonIgnoreProperties(ignoreUnknown=true);可以忽略未知的属性，避免反序列化抛出异常。
@JsonUnwrapped(prefix=*, suffix=*)

<!-- 包自动扫描 不扫描Controller注解-->
    <context:component-scan base-package="cn.hncu">
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
</context:component-scan>

Caused by: java.lang.RuntimeException: Hystrix circuit short-circuited and is OPEN

Hystrix熔断机制

>>>:无符号右移，忽略符号位，空位都以0补齐

MongoDB: Database -> Collection -> Document



motan是新浪开源的一个RPC框架，可以看做是Dubbo的量身裁剪版。

motan和dubbo都通过SPI机制实现扩展。

BeanPostProcessor阶段，BeanDefinitionParser实现类

git config --global core.longpaths true

主动：程序内部埋点，服务主动上报自身的运行情况，一般都是具化为业务的各个属性或者指标，这种方式准、快，灵活性好，指标丰富。但是在非标准框架下会有一定的代码改造成本。
被动：无需埋点，从外部探测或获取服务的运行情况，例如ping探测、日志采集分析等等。
旁路：与程序逻辑无关，对服务质量与口碑的监控，例如舆情分析。

2PC两阶段提交事务。

使用即时编译把字节码编译成机器码
字节序: byte ordering。Big-Endian Little-Endian

在Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达式所操作的boolean值，在编译之后都使用Java虚拟机中的int数据类型来代替。

Java虚拟机中有三种引用类型:类类型、数组类型和接口类型。class type, array type, interface type。 


设计模式:5种创建型模式、7种结构型模式、11种设计型模式
抽象工厂模式、工厂方法模式、单例模式、原型模式、建造者模式
组合模式、装饰器模式、适配器模式、中介者模式、享元模式、桥接模式、代理模式
策略模式、模板模式、中介者模式、解释器模式、观察者模式、访问者模式、迭代器模式、状态模式、备忘录模式、命令模式、责任链模式


建造者模式的定义是：将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。

工厂方法模式是简单工厂的仅一步深化， 在工厂方法模式中，我们不再提供一个统一的工厂类来创建所有的对象，而是针对不同的对象提供不同的工厂。也就是说 每个对象都有一个与之对应的工厂 。


继承并且覆盖超类方法的时候，子类中的方法的可见性必须等于或者大于超类中的方法的可见性，子类中的方法所抛出的受检异常只能是超类中对应方法所抛出的受检异常的子类。LSP：里氏替换原则

为什么不使用全局变量确保一个类只有一个实例呢？
我们知道全局变量分为静态变量和实例变量，静态变量也可以保证该类的实例只存在一个。 
只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。
但是，如果说这个对象非常消耗资源，而且程序某次的执行中一直没用，这样就造成了资源的浪费。利用单例模式的话，我们就可以实现在需要使用时才创建对象，这样就避免了不必要的资源浪费。 不仅仅是因为这个原因，在程序中我们要尽量避免全局变量的使用，大量使用全局变量给程序的调试、维护等带来困难。

抽象工厂模式VS建造者模式：
抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产即可。而建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。

在标准的适配器模式里面，根据适配器的实现方式，把适配器分成对象适配器和类适配器。
对象适配器:依赖于对象的组合，都是采用对象组合的方式，也就是对象适配器实现的方式。
类适配器:采用多重继承对一个接口与另一个接口进行匹配。由于 Java 不支持多重继承，所以到目前为止还没有涉及。但可以通过让适配器去实现 Target 接口的方式来实现。
